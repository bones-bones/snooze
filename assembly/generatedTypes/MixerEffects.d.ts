type i8 = number;
type i16 = number;
type i32 = number;
type i64 = bigint;
type isize = number;
type u8 = number;
type u16 = number;
type u32 = number;
type u64 = bigint;
type usize = number;
type f32 = number;
type f64 = number;
type bool = boolean | number;
export var Uint8ClampedArray_ID: u32;
export function draw(degree: f64, effect: u32): void;
export function overlay(leftArray: usize, rightArray: usize, _width: f64, degree?: f64): usize;
export function mergeAverage(leftArray: usize, rightArray: usize, _width: u32, degree?: f64): usize;
export function subtract(leftArray: usize, rightArray: usize, _width: f64, degree?: f64): usize;
export const memory: WebAssembly.Memory;
export function __new(size: usize, id: u32): usize;
export function __pin(ptr: usize): usize;
export function __unpin(ptr: usize): void;
export function __collect(): void;
export const __rtti_base: usize;
export const __setArgumentsLength: ((n: i32) => void) | undefined;
